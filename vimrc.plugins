
fun! <SID>FixMiniBufExplorerTitle()
	if "-MiniBufExplorer-" == bufname("%")
		setlocal statusline=%2*%-3.3n%0*
		setlocal statusline+=\[Buffers\]
		setlocal statusline+=%=%2*\ %<%P
	endif
endfun

fun! <SID>TagListOptions()
	if "__Tag_List__" == bufname("%")
		setlocal cursorline
		setlocal statusline=%2*%-3.3n%0*
		setlocal statusline+=\[Tag\ List\]
		setlocal statusline+=%=%2*\ %<%P
	endif
endfun

au BufWinEnter *
	\ let oldwinnr=winnr() |
	\ windo call <SID>FixMiniBufExplorerTitle() |
	\ windo call <SID>TagListOptions() |
	\ exec oldwinnr . " wincmd w"

map <Leader>w <Plug>CamelCaseMotion_w
map <Leader>b <Plug>CamelCaseMotion_b
map <Leader>r <Plug>CamelCaseMotion_e

" plugin settings

map <C-{> :BufExplorer<CR>

" TagBar
let g:tagbar_autoclose=1
let g:tagbar_autofocus=1
let g:tagbar_autoshowtag=1
let g:tagbar_sort=0
let g:tagbar_width=80
let g:tagbar_compact=1
let g:tagbar_ctags_bin="/usr/local/bin/ctags"

map <leader>m :TagbarToggle<CR>

" netrw
let g:netrw_sort_sequence='[\/]$,\.[a-np-z]$,\.h$,\.c$,\.cpp$,\.py$,\.sh$,*,\.o$,\.obj$,\.info$,\.pyc$,\.swp$,\.bak$,\~$'

" nerd tree
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeHighlightCursorline=1
let g:NERDTreeShowHidden=0
let g:NERDTreeCaseSensitiveSort=1
let g:NERDTreeMinimalUI=1

map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
map <leader>e :NERDTreeFind<CR>
nmap <leader>nt :NERDTreeFind<CR>

" showmarks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

" TabBar fancy (visible) colors
highlight def link Tb_Normal         Identifier
highlight def link Tb_Changed        Operator
highlight def link Tb_VisibleNormal  Constant
highlight def link Tb_VisibleChanged Special

let g:lcolor_fg='22,23,24,25,26,27'
let g:lcolor_bg='253,254,255,253,254,255'

" bufexplorer
nmap <F5> <Esc>:BufExplorer<cr>
vmap <F5> <esc>:BufExplorer<cr>
imap <F5> <esc><esc>:BufExplorer<cr>

nmap \b <Esc>:BufExplorer<cr>
vmap \b <esc>:BufExplorer<cr>
imap \b <esc><esc>:BufExplorer<cr>

" CtrlP
nmap ; :CtrlP<CR>

let g:ctrlp_extensions = ['tag', 'buffertag']
"let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_working_path_mode = ''

let g:ctrlp_map = '<Leader>t'
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0


" rainbow paren
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Search Dash for word under cursor
function! SearchDash()
  let s:browser = "/usr/bin/open"
  let s:wordUnderCursor = expand("<cword>")
  let s:url = "dash://".s:wordUnderCursor
  let s:cmd ="silent ! " . s:browser . " " . s:url
  execute s:cmd
  redraw!
endfunction
map <leader>K :call SearchDash()<CR>
